{"ast":null,"code":"import { ADD_CONTACT, DELETE_CONTACT, SET_ALERT, SET_CURRENT, UPDATE_CONTACT, FILTER_CONTACT, CLEAR_FILTER, CLEAR_CURRENT, CONTACT_ERRORS, GET_CONTACTS, CLEAR_CONTACTS } from '../type';\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return { ...state,\n        contacts: action.payload,\n        loading: false\n      };\n\n    case ADD_CONTACT:\n      return { ...state,\n        contacts: [...state.contacts, action.payload],\n        loading: false\n      };\n\n    case DELETE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.filter(contact => contact._id !== action.payload),\n        loading: false\n      };\n\n    case UPDATE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.map(contact => contact.id === action.payload.id ? action.payload : contact),\n        loading: false\n      };\n\n    case SET_CURRENT:\n      return { ...state,\n        current: action.payload\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: null\n      };\n\n    case FILTER_CONTACT:\n      return { ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, 'gi'); //gi matches any upper or lowercase global insensitive\n\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      };\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null\n      };\n\n    case CONTACT_ERRORS:\n      return { ...state,\n        error: action.payload\n      };\n\n    case CLEAR_CONTACTS:\n      return { ...state,\n        contacts: null,\n        filtered: null,\n        error: null,\n        current: null\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/Users/rohit/OneDrive/Desktop/Contact-Keeper/client/src/context/contact/contactReducer.js"],"names":["ADD_CONTACT","DELETE_CONTACT","SET_ALERT","SET_CURRENT","UPDATE_CONTACT","FILTER_CONTACT","CLEAR_FILTER","CLEAR_CURRENT","CONTACT_ERRORS","GET_CONTACTS","CLEAR_CONTACTS","state","action","type","contacts","payload","loading","filter","contact","_id","map","id","current","filtered","regex","RegExp","name","match","email","error"],"mappings":"AAAA,SACIA,WADJ,EAEIC,cAFJ,EAGIC,SAHJ,EAIIC,WAJJ,EAKIC,cALJ,EAMIC,cANJ,EAOIC,YAPJ,EAQIC,aARJ,EASIC,cATJ,EAUIC,YAVJ,EAWIC,cAXJ,QAYO,SAZP;AAcA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,YAAL;AACI,aAAO,EACH,GAAGE,KADA;AAEHG,QAAAA,QAAQ,EAAEF,MAAM,CAACG,OAFd;AAGHC,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKhB,WAAL;AACI,aAAO,EACH,GAAGW,KADA;AAEHG,QAAAA,QAAQ,EAAE,CAAC,GAAGH,KAAK,CAACG,QAAV,EAAoBF,MAAM,CAACG,OAA3B,CAFP;AAGHC,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKf,cAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeG,MAAf,CAAsBC,OAAO,IAAIA,OAAO,CAACC,GAAR,KAAgBP,MAAM,CAACG,OAAxD,CAFP;AAGHC,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKZ,cAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeM,GAAf,CAAmBF,OAAO,IAChCA,OAAO,CAACG,EAAR,KAAeT,MAAM,CAACG,OAAP,CAAeM,EAA9B,GAAmCT,MAAM,CAACG,OAA1C,GAAoDG,OAD9C,CAFP;AAKHF,QAAAA,OAAO,EAAE;AALN,OAAP;;AAOJ,SAAKb,WAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHW,QAAAA,OAAO,EAAEV,MAAM,CAACG;AAFb,OAAP;;AAIJ,SAAKR,aAAL;AACI,aAAO,EACH,GAAGI,KADA;AAEHW,QAAAA,OAAO,EAAE;AAFN,OAAP;;AAIJ,SAAKjB,cAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHY,QAAAA,QAAQ,EAAEZ,KAAK,CAACG,QAAN,CAAeG,MAAf,CAAsBC,OAAO,IAAI;AACvC,gBAAMM,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEb,MAAM,CAACG,OAAQ,EAA7B,EAAgC,IAAhC,CAAd,CADuC,CACe;;AACtD,iBAAOG,OAAO,CAACQ,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BN,OAAO,CAACU,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC;AACH,SAHS;AAFP,OAAP;;AAOJ,SAAKlB,YAAL;AACI,aAAO,EACH,GAAGK,KADA;AAEHY,QAAAA,QAAQ,EAAE;AAFP,OAAP;;AAIJ,SAAKf,cAAL;AACI,aAAO,EACH,GAAGG,KADA;AAEHkB,QAAAA,KAAK,EAAEjB,MAAM,CAACG;AAFX,OAAP;;AAIJ,SAAKL,cAAL;AACI,aAAO,EACH,GAAGC,KADA;AAEHG,QAAAA,QAAQ,EAAE,IAFP;AAGHS,QAAAA,QAAQ,EAAE,IAHP;AAIHM,QAAAA,KAAK,EAAE,IAJJ;AAKHP,QAAAA,OAAO,EAAE;AALN,OAAP;;AAOJ;AACI,aAAOX,KAAP;AAhER;AAkEH,CAnED","sourcesContent":["import {\r\n    ADD_CONTACT,\r\n    DELETE_CONTACT,\r\n    SET_ALERT,\r\n    SET_CURRENT,\r\n    UPDATE_CONTACT,\r\n    FILTER_CONTACT,\r\n    CLEAR_FILTER,\r\n    CLEAR_CURRENT,\r\n    CONTACT_ERRORS,\r\n    GET_CONTACTS,\r\n    CLEAR_CONTACTS\r\n} from '../type';\r\n\r\nexport default (state, action) => {\r\n    switch (action.type) {\r\n        case GET_CONTACTS:\r\n            return {\r\n                ...state,\r\n                contacts: action.payload,\r\n                loading: false\r\n            }\r\n        case ADD_CONTACT:\r\n            return {\r\n                ...state,\r\n                contacts: [...state.contacts, action.payload],\r\n                loading: false\r\n            };\r\n        case DELETE_CONTACT:\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(contact => contact._id !== action.payload),\r\n                loading: false\r\n            }\r\n        case UPDATE_CONTACT:\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.map(contact =>\r\n                    contact.id === action.payload.id ? action.payload : contact\r\n                ),\r\n                loading: false\r\n            }\r\n        case SET_CURRENT:\r\n            return {\r\n                ...state,\r\n                current: action.payload\r\n            };\r\n        case CLEAR_CURRENT:\r\n            return {\r\n                ...state,\r\n                current: null\r\n            };\r\n        case FILTER_CONTACT:\r\n            return {\r\n                ...state,\r\n                filtered: state.contacts.filter(contact => {\r\n                    const regex = new RegExp(`${action.payload}`, 'gi');  //gi matches any upper or lowercase global insensitive\r\n                    return contact.name.match(regex) || contact.email.match(regex);\r\n                })\r\n            }\r\n        case CLEAR_FILTER:\r\n            return {\r\n                ...state,\r\n                filtered: null\r\n            };\r\n        case CONTACT_ERRORS:\r\n            return {\r\n                ...state,\r\n                error: action.payload\r\n            };\r\n        case CLEAR_CONTACTS:\r\n            return {\r\n                ...state,\r\n                contacts: null,\r\n                filtered: null,\r\n                error: null,\r\n                current: null\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}